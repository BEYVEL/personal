# Expense Tracker API

## Description

A RESTful API for managing personal expenses. This project includes features such as user authentication, expense management, and reporting. It is built using Python with Flask and SQLAlchemy, and includes authentication via JWT, as well as various libraries and frameworks for data handling and serialization.

## Features

- **User Authentication**: Register and log in users, manage sessions with JWT.
- **Expense Management**: Add, view, update, and delete expense records.
- **Expense Categorization**: Categorize expenses and view them by category.
- **Expense Reports**: Generate reports on expenses.

## Technology Stack

- **Python**: Backend language
- **Flask**: Web framework
- **SQLAlchemy**: ORM for database interaction
- **SQLite**: Database
- **JWT**: JSON Web Tokens for authentication
- **Marshmallow**: Serialization/deserialization
- **Pytest**: Testing framework

## Setup

1. **Clone the repository**:
    ```bash
    git clone https://github.com/yourusername/expense-tracker-api.git
    cd expense-tracker-api
    ```

2. **Create and activate a virtual environment**:
    ```bash
    python -m venv venv
    source venv/bin/activate  # On Windows: venv\Scripts\activate
    ```

3. **Install the dependencies**:
    ```bash
    pip install -r requirements.txt
    ```

4. **Run the application**:
    ```bash
    flask run
    ```

5. **Run tests**:
    ```bash
    pytest
    ```

## Endpoints

### User Authentication

- **Register**: `POST /register`
    - Request Body: `{ "username": "string", "password": "string" }`
    - Response: `201 Created`

- **Login**: `POST /login`
    - Request Body: `{ "username": "string", "password": "string" }`
    - Response: `{ "access_token": "string" }`

### Expense Management

- **Add Expense**: `POST /expenses`
    - Request Body: `{ "amount": "float", "description": "string", "category": "string" }`
    - Headers: `Authorization: Bearer <token>`
    - Response: `201 Created`

- **Get Expenses**: `GET /expenses`
    - Headers: `Authorization: Bearer <token>`
    - Response: `[ { "id": "int", "amount": "float", "description": "string", "category": "string", "user_id": "int" } ]`

### Reports

- **Get Expense Reports**: `GET /reports`
    - Headers: `Authorization: Bearer <token>`
    - Response: `{ "total_amount": "float" }`

## Dockerization (Optional)

To run the application with Docker:

1. **Build the Docker image**:
    ```bash
    docker build -t expense-tracker-api .
    ```

2. **Run the Docker container**:
    ```bash
    docker run -p 5000:5000 expense-tracker-api
    ```

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgements

- [Flask](https://flask.palletsprojects.com/)
- [SQLAlchemy](https://www.sqlalchemy.org/)
- [Marshmallow](https://marshmallow.readthedocs.io/)
- [JWT](https://jwt.io/)
- [Pytest](https://docs.pytest.org/en/stable/)


python -m venv venv
source venv/bin/activate
pip install Flask SQLAlchemy Flask-JWT-Extended Marshmallow

Flask==2.0.3
SQLAlchemy==1.4.27
Flask-JWT-Extended==4.4.4
Marshmallow==3.14.1

from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from flask_jwt_extended import JWTManager

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///expenses.db'
app.config['JWT_SECRET_KEY'] = 'your_jwt_secret_key'

db = SQLAlchemy(app)
ma = Marshmallow(app)
jwt = JWTManager(app)

from app import routes

from app import db

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)
    expenses = db.relationship('Expense', backref='owner', lazy=True)

class Expense(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    amount = db.Column(db.Float, nullable=False)
    description = db.Column(db.String(200))
    category = db.Column(db.String(100))
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
from flask import request, jsonify
from app import app, db
from app.models import User, Expense
from app.schemas import ExpenseSchema
from flask_jwt_extended import create_access_token, jwt_required, get_jwt_identity

@app.route('/register', methods=['POST'])
def register():
    data = request.json
    new_user = User(username=data['username'], password=data['password'])
    db.session.add(new_user)
    db.session.commit()
    return jsonify({'message': 'User created'}), 201

@app.route('/login', methods=['POST'])
def login():
    data = request.json
    user = User.query.filter_by(username=data['username'], password=data['password']).first()
    if user:
        access_token = create_access_token(identity={'id': user.id})
        return jsonify(access_token=access_token)
    return jsonify({'message': 'Invalid credentials'}), 401

@app.route('/expenses', methods=['POST'])
@jwt_required()
def add_expense():
    data = request.json
    user_id = get_jwt_identity()['id']
    new_expense = Expense(amount=data['amount'], description=data['description'],
                          category=data['category'], user_id=user_id)
    db.session.add(new_expense)
    db.session.commit()
    return jsonify({'message': 'Expense added'}), 201

@app.route('/expenses', methods=['GET'])
@jwt_required()
def get_expenses():
    user_id = get_jwt_identity()['id']
    expenses = Expense.query.filter_by(user_id=user_id).all()
    expense_schema = ExpenseSchema(many=True)
    return jsonify(expense_schema.dump(expenses))

@app.route('/reports', methods=['GET'])
@jwt_required()
def get_reports():
    user_id = get_jwt_identity()['id']
    expenses = Expense.query.filter_by(user_id=user_id).all()
    total_amount = sum(expense.amount for expense in expenses)
    return jsonify({'total_amount': total_amount})
from app import ma
from app.models import Expense

class ExpenseSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Expense
import pytest
from app import app, db

@pytest.fixture
def client():
    app.config['TESTING'] = True
    with app.test_client() as client:
        yield client

def test_register(client):
    response = client.post('/register', json={'username': 'testuser', 'password': 'testpass'})
    assert response.status_code == 201
def test_add_expense(client):
    token = client.post('/login', json={'username': 'testuser', 'password': 'testpass'}).json['access_token']
    response = client.post('/expenses', json={'amount': 100, 'description': 'Test Expense', 'category': 'Misc'}, headers={'Authorization': f'Bearer {token}'})
    assert response.status_code == 201
FROM python:3.9-slim

WORKDIR /app
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
COPY . .

CMD ["flask", "run", "--host=0.0.0.0"]
version: '3'
services:
  web:
    build: .
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=app
      - FLASK_ENV=development
# Expense Tracker API

## Description
A RESTful API for managing personal expenses, including user authentication, expense management, and reporting.

## Setup
1. Install dependencies:
   ```bash
   pip install -r requirements.txt
flask run
pytest


python -m venv venv
source venv/bin/activate
pip install Flask SQLAlchemy Flask-JWT-Extended Marshmallow

Flask==2.0.3
SQLAlchemy==1.4.27
Flask-JWT-Extended==4.4.4
Marshmallow==3.14.1

The `app.py` file should include:

```python
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///expenses.db'
app.config['JWT_SECRET_KEY'] = 'your_jwt_secret_key'

db = SQLAlchemy(app)
ma = Marshmallow(app)
jwt = JWTManager(app)

from app import routes


from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from flask_jwt_extended import JWTManager

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///expenses.db'
app.config['JWT_SECRET_KEY'] = 'your_jwt_secret_key'

db = SQLAlchemy(app)
ma = Marshmallow(app)
jwt = JWTManager(app)

from app import routes

from app import db

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)
    expenses = db.relationship('Expense', backref='owner', lazy=True)

class Expense(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    amount = db.Column(db.Float, nullable=False)
    description = db.Column(db.String(200))
    category = db.Column(db.String(100))
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
from flask import request, jsonify
from app import app, db
from app.models import User, Expense
from app.schemas import ExpenseSchema
from flask_jwt_extended import create_access_token, jwt_required, get_jwt_identity

@app.route('/register', methods=['POST'])
def register():
    data = request.json
    new_user = User(username=data['username'], password=data['password'])
    db.session.add(new_user)
    db.session.commit()
    return jsonify({'message': 'User created'}), 201

@app.route('/login', methods=['POST'])
def login():
    data = request.json
    user = User.query.filter_by(username=data['username'], password=data['password']).first()
    if user:
        access_token = create_access_token(identity={'id': user.id})
        return jsonify(access_token=access_token)
    return jsonify({'message': 'Invalid credentials'}), 401

@app.route('/expenses', methods=['POST'])
@jwt_required()
def add_expense():
    data = request.json
    user_id = get_jwt_identity()['id']
    new_expense = Expense(amount=data['amount'], description=data['description'],
                          category=data['category'], user_id=user_id)
    db.session.add(new_expense)
    db.session.commit()
    return jsonify({'message': 'Expense added'}), 201

@app.route('/expenses', methods=['GET'])
@jwt_required()
def get_expenses():
    user_id = get_jwt_identity()['id']
    expenses = Expense.query.filter_by(user_id=user_id).all()
    expense_schema = ExpenseSchema(many=True)
    return jsonify(expense_schema.dump(expenses))

@app.route('/reports', methods=['GET'])
@jwt_required()
def get_reports():
    user_id = get_jwt_identity()['id']
    expenses = Expense.query.filter_by(user_id=user_id).all()
    total_amount = sum(expense.amount for expense in expenses)
    return jsonify({'total_amount': total_amount})
from app import ma
from app.models import Expense

class ExpenseSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Expense
import pytest
from app import app, db

@pytest.fixture
def client():
    app.config['TESTING'] = True
    with app.test_client() as client:
        yield client

def test_register(client):
    response = client.post('/register', json={'username': 'testuser', 'password': 'testpass'})
    assert response.status_code == 201
def test_add_expense(client):
    token = client.post('/login', json={'username': 'testuser', 'password': 'testpass'}).json['access_token']
    response = client.post('/expenses', json={'amount': 100, 'description': 'Test Expense', 'category': 'Misc'}, headers={'Authorization': f'Bearer {token}'})
    assert response.status_code == 201
FROM python:3.9-slim

WORKDIR /app
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
COPY . .

CMD ["flask", "run", "--host=0.0.0.0"]
version: '3'
services:
  web:
    build: .
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=app
      - FLASK_ENV=development
# Expense Tracker API

## Description
A RESTful API for managing personal expenses, including user authentication, expense management, and reporting.

## Setup
1. Install dependencies:
   ```bash
   pip install -r requirements.txt
flask run
pytest

